generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(cuid())
  email               String     @unique
  name                String?
  role                UserRole   @default(VENDOR)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  companyName         String?
  ueiNumber           String?
  socioEconomicStatus String[]
  proposals           Proposal[]
  questions           Question[]

  @@map("users")
}

model Solicitation {
  id                 String             @id @default(cuid())
  number             String             @unique
  title              String
  agency             String
  description        String
  dueDate            DateTime
  questionCutoffDate DateTime?
  proposalCutoffDate DateTime?
  status             SolicitationStatus @default(OPEN)
  evaluationPeriods  Json?              // Store evaluation periods as JSON
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  clins              Clin[]
  proposals          Proposal[]
  questions          Question[]

  @@map("solicitations")
}

model Clin {
  id             String       @id @default(cuid())
  name           String
  description    String
  pricingModel   PricingModel
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  solicitationId String
  solicitation   Solicitation @relation(fields: [solicitationId], references: [id], onDelete: Cascade)

  @@map("clins")
}

model Proposal {
  id             String         @id @default(cuid())
  status         ProposalStatus @default(SUBMITTED)
  submissionDate DateTime       @default(now())
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  vendorId       String
  solicitationId String
  solicitation   Solicitation   @relation(fields: [solicitationId], references: [id], onDelete: Cascade)
  vendor         User           @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("proposals")
}

model Question {
  id             String         @id @default(cuid())
  question       String
  answer         String?
  status         QuestionStatus @default(DRAFT)
  dateAsked      DateTime       @default(now())
  dateAnswered   DateTime?
  dateSubmitted  DateTime?
  datePosted     DateTime?
  isQuestionDraft Boolean       @default(true)
  isAnswerDraft   Boolean       @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  vendorId       String
  solicitationId String
  solicitation   Solicitation   @relation(fields: [solicitationId], references: [id], onDelete: Cascade)
  vendor         User           @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("questions")
}

enum UserRole {
  VENDOR
  ADMIN
}

enum SolicitationStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum PricingModel {
  FFP
  TM
  CR
}

enum ProposalStatus {
  SUBMITTED
  UNDER_REVIEW
  AWARDED
  REJECTED
}

enum QuestionStatus {
  DRAFT
  SUBMITTED
  ANSWERED
  POSTED
}
